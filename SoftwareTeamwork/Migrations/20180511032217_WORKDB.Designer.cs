// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoftwareTeamwork;

namespace SoftwareTeamwork.Migrations
{
    [DbContext(typeof(InfoContext))]
    [Migration("20180511032217_WORKDB")]
    partial class WORKDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rc1-32029")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SoftwareTeamwork.AccountInfo", b =>
                {
                    b.Property<int>("AccountInfoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName");

                    b.HasKey("AccountInfoId");

                    b.ToTable("AccountInfos");
                });

            modelBuilder.Entity("SoftwareTeamwork.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseBegin");

                    b.Property<int>("CourseEnd");

                    b.Property<string>("CourseLoc");

                    b.Property<string>("CourseName");

                    b.Property<int>("CourseSetId");

                    b.Property<string>("CourseTeacher");

                    b.Property<int>("CourseTime");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseSetId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SoftwareTeamwork.CourseInfo", b =>
                {
                    b.Property<int>("CourseInfoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountInfoId");

                    b.HasKey("CourseInfoId");

                    b.HasIndex("AccountInfoId");

                    b.ToTable("CourseInfos");
                });

            modelBuilder.Entity("SoftwareTeamwork.CourseSet", b =>
                {
                    b.Property<int>("CourseSetId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseInfoId");

                    b.Property<string>("Term");

                    b.HasKey("CourseSetId");

                    b.HasIndex("CourseInfoId");

                    b.ToTable("CourseSets");
                });

            modelBuilder.Entity("SoftwareTeamwork.DataTime", b =>
                {
                    b.Property<int>("DataTimeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Day");

                    b.Property<int>("Hour");

                    b.Property<int>("Mon");

                    b.HasKey("DataTimeId");

                    b.ToTable("DataTimes");
                });

            modelBuilder.Entity("SoftwareTeamwork.FlowInfo", b =>
                {
                    b.Property<int>("FlowInfoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountInfoId");

                    b.Property<int>("FlowData");

                    b.Property<int?>("InfoTimeDataTimeId");

                    b.HasKey("FlowInfoId");

                    b.HasIndex("AccountInfoId");

                    b.HasIndex("InfoTimeDataTimeId");

                    b.ToTable("FlowInfos");
                });

            modelBuilder.Entity("SoftwareTeamwork.Course", b =>
                {
                    b.HasOne("SoftwareTeamwork.CourseSet", "CourseSet")
                        .WithMany("Courses")
                        .HasForeignKey("CourseSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftwareTeamwork.CourseInfo", b =>
                {
                    b.HasOne("SoftwareTeamwork.AccountInfo", "AccountInfo")
                        .WithMany("CourseInfos")
                        .HasForeignKey("AccountInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftwareTeamwork.CourseSet", b =>
                {
                    b.HasOne("SoftwareTeamwork.CourseInfo", "CourseInfo")
                        .WithMany("CourseSets")
                        .HasForeignKey("CourseInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftwareTeamwork.FlowInfo", b =>
                {
                    b.HasOne("SoftwareTeamwork.AccountInfo", "AccountInfo")
                        .WithMany("FlowInfos")
                        .HasForeignKey("AccountInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftwareTeamwork.DataTime", "InfoTime")
                        .WithMany()
                        .HasForeignKey("InfoTimeDataTimeId");
                });
#pragma warning restore 612, 618
        }
    }
}
